!function(t){var e={};function a(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=t,a.c=e,a.d=function(t,e,i){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)a.d(i,s,function(e){return t[e]}.bind(null,s));return i},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=0)}([function(t,e){const a=t=>[...Array(t)].map((t,e)=>e),i="idle",s="dying",n="jumping",o="walking",r="running",l={w:"jump",a:"left",s:"crouch",d:"right",q:"attack",e:"SWORD"},m="paused",h="started",d="ended",p=0,c=720,g=1280,u={y:c-100},y=.4,x=.5,P=g-400,F=15,_="Zorque",w="images/Balloons/Balloons_01_64x64_Alt_00_004.png",I="images/Balloons/Balloons_01_64x64_Alt_00_005.png",v="images/Balloons/Balloons_01_64x64_Alt_00_006.png",A="images/Balloons/Balloons_01_64x64_Alt_00_007.png",b="images/Balloons/Balloons_01_64x64_Alt_01_004.png",S="images/Balloons/Balloons_01_64x64_Alt_01_005.png",f="images/Balloons/Balloons_01_64x64_Alt_01_006.png",k="images/Balloons/Balloons_01_64x64_Alt_01_007.png",M="images/Balloons/Balloons_01_64x64_Alt_02_004.png",B="images/Balloons/Balloons_01_64x64_Alt_02_005.png",C="images/Balloons/Balloons_01_64x64_Alt_02_006.png",R="images/Balloons/Balloons_01_64x64_Alt_02_007.png",E="images/Balloons/Balloons_01_64x64_Alt_03_004.png",O="images/Balloons/Balloons_01_64x64_Alt_03_005.png",D="images/Balloons/Balloons_01_64x64_Alt_03_006.png",T="images/Balloons/Balloons_01_64x64_Alt_03_007.png",L="images/Balloons/Balloons_01_64x64_Alt_04_004.png",V="images/Balloons/Balloons_01_64x64_Alt_04_005.png",j="images/Balloons/Balloons_01_64x64_Alt_04_006.png",K="images/Balloons/Balloons_01_64x64_Alt_04_007.png",$=["images/fire/File",30],z=["images/Terror/idle/2_terrorist_2_Idle_00",8],H=["images/Terror/hurt/2_terrorist_2_Hurt_00",9],G=["images/Terror/run/2_terrorist_2_Run_00",6],N=["images/Terror/jump/2_terrorist_2_Jump_00",8],U={randomColor:()=>`rgba(${~~(255*Math.random())}, ${~~(255*Math.random())}, ${~~(255*Math.random())}, ${Math.random()})`,getPlayerFromKey:t=>l.indexOf(t),random:(t=0,e=1)=>Math.round(t+Math.random()*(e-t)),updateText:(t,e)=>{t.innerText=e},newCanvas:t=>{const e=document.createElement("canvas");return[e.height,e.width]=[c,g],t.appendChild(e),e},newImageFromPath:t=>{const e=document.createElement("img");return e.src=t,e},lt:(t,e)=>t<e,gt:(t,e)=>t>e,newImagesFromPath:([t,e])=>a(e).map(e=>U.newImageFromPath(`${t}${e}.png`)),flip:t=>(...e)=>t(e.reverse()),wait:t=>new Promise((e,a)=>setTimeout(e,t)),isObject:t=>t instanceof Object&&t.constructor===Object&&!Array.isArray(t),modulus:(t,e)=>(t%e+e)%e,mergeProps:function t(e,a){return Object.keys(a).reduce((e,i)=>(e[i]=U.isObject(a[i])?t(e[i]||{},a[i]):a[i],e),e)},mergeFunctions:(t,e,a)=>{const i=e[t];return e[t]=function(...s){return i&&i.call(e,...s),a[t].call(e,...s)},e},setState:(t,e)=>(U.mergeProps(t.state,e),t),vectorAdd:(t,e)=>({x:t.x+e.x,y:t.y+e.y}),vectorAddC:t=>e=>U.vectorAdd(t,e),vectorSubstract:(t,e)=>({x:t.x-e.x,y:t.y-e.y}),vectorSubstractC:t=>e=>U.vectorSubstract(t,e),vectorDot:(t,e)=>t.x*e.x+t.y*e.y,vectorLength:t=>Math.sqrt(t.x*t.x+t.y*t.y),normalize:t=>{var e=1/U.vectorLength(t);return{x:t.x*e,y:t.y*e}},vectorMultiply:(t,e)=>({x:t.x*e,y:t.y*e}),vectorMax:(t,e)=>({x:void 0!==e.x?Math.min(t.x,e.x):t.x,y:void 0!==e.y?Math.min(t.y,e.y):t.y}),vectorMaxC:t=>e=>U.vectorMax(e,t),vectorMin:(t,e)=>({x:void 0!==e.x?Math.max(t.x,e.x):t.x,y:void 0!==e.y?Math.max(t.y,e.y):t.y}),vectorMinC:t=>e=>U.vectorMin(e,t),vectorGT:(t,e)=>Math.abs(t.x)>=e||Math.abs(t.y)>=e,vectorLT:(t,e)=>Math.abs(t.x)<=e||Math.abs(t.y)<=e},q=(t,e)=>Object.keys(e).reduce((t,a)=>"update"===a?U.mergeFunctions(a,t,e):(t[a]=["state","props"].includes(a)?U.mergeProps(t[a]||{},e[a]):e[a],t),t),J=(t,e)=>{const a={};return t.reduce(q,a),q(a,e)},W={gameArea:document.getElementById("game-area"),pop:document.getElementById("pop"),hadouken:document.getElementById("hadouken"),lose:document.getElementById("lose"),killingspree:document.getElementById("killingspree"),danger:document.getElementById("danger"),rampage:document.getElementById("rampage"),ownage:document.getElementById("ownage"),unstoppable:document.getElementById("unstoppable"),godlike:document.getElementById("godlike"),theme:document.getElementById("theme")},X={state:{position:{x:0,y:0},display:!0,width:0,height:0,animation:{name:i,flipped:!1,index:0,framesSkipped:0,repeatCount:0,duplicateCount:0}},props:{zIndex:0,animations:{[i]:{images:[],imagesFlipped:[],duplicate:0,delay:0,repeat:0}}},update:function(){},resetAnimation(){return U.setState(this,{animation:{index:0,framesSkipped:0,repeatCount:0}})},getBoundingRect(){return{x1:this.state.position.x,x2:this.state.position.x+this.getCurrentAnimationFrame().width,y1:this.state.position.y-this.getCurrentAnimationFrame().height,y2:this.state.position.y}},getCurrentAnimationFrame(){return this.getAnimationFrameAt(this.getAnimationIndex())},getCurrentAnimation(){const t=this.props.animations[this.state.animation.name];return this.state.animation.flipped?t.imagesFlipped:t.images},getAnimationIndex(){return this.state.animation.index},getAnimationFrameAt(t){const e=this.getCurrentAnimation();return e[t%e.length]},getAnimationProp(t){const e=this.state.animation[t],a=this.props.animations[this.state.animation.name][t];if(void 0!==e)return e;if(void 0!==a)return a;throw Error("Invalid Property")},setAnimationProp(t,e){return this.state.animation[t]=e,this},setAnimationIndex(t){return t>=this.getCurrentAnimation().length-1&&this.incAnimationProp("repeatCount"),this.isAnimationDone()?(this.state.animation.index=this.getCurrentAnimation().length-1,this):(this.state.animation.index=t%this.getCurrentAnimation().length,this)},incAnimationProp(t){return"index"===t?this.incAnimationIndex():this.setAnimationProp(t,this.getAnimationProp(t)+1)},incAnimationIndex(){return this.setAnimationIndex(this.getAnimationIndex()+1)},isAnimationDone(){return this.getAnimationProp("repeatCount")>=this.getAnimationProp("repeat")},nextFrame(t=!1,e){t&&this.resetAnimation();const a=this.getAnimationFrameAt(this.getAnimationIndex());return(()=>(this.incAnimationProp("framesSkipped"),this.getAnimationProp("framesSkipped")<this.getAnimationProp("delay")?a:(this.setAnimationProp("framesSkipped",0).incAnimationIndex(),a)))(),a},reset(){return this.update(!0),U.setState(this,{animation:{name:i}}).resetAnimation()},drawParallaxLayer(t,e){const a=this.getAnimationFrameAt(this.getAnimationIndex()),i=U.modulus(-e.x,a.width),s=Math.min(a.width-i,g),n=!!this.getAnimationProp("duplicate");if(this.getAnimationProp("duplicateCount")>this.getAnimationProp("duplicate"))return 0===i&&(this.state.display=!1),t.drawImage(a,-i,e.y),this;if(n&&0===i&&this.incAnimationProp("duplicateCount"),t.drawImage(a,i,e.y,s,c,0,0,s,c),s<g){const i=g-s;t.drawImage(a,0,e.y,i,c,s,0,i,c)}return this},nextPosition(t){return U.vectorSubstract(this.state.position,t.position)},drawParticle(t,e){const a=this.nextPosition(e);if(this.state.radius<=0)return this;t.beginPath(),t.arc(a.x,a.y,this.state.radius,0,2*Math.PI,!1),t.fillStyle=`hsla(${this.state.hue}, 100%, 50%, 1)`,t.fill()},drawImage(t,e){if("particle"===this.props.name)return this.drawParticle(t,e);if(!this.state.display)return this;const a=this.nextPosition(e);if(this.getBoundingRect(),this.getAnimationProp("duplicate"))this.drawParallaxLayer(t,a);else{const e=this.nextFrame(!1);if(!e)return this;"ball"===this.props.name||this.props.name,t.drawImage(e,a.x,a.y-this.getCurrentAnimationFrame().height)}return this},render(t,e){return this.update(),this.drawImage(t,e)}},Y={state:{particleOrigin:{x:0,y:0},maxRadius:100,minRadius:5,particleCount:0,hue:0},props:{targetParticles:25},emitParticles(t){this.state.particleCount++,this.state.hue=Math.floor(360*Math.random());const e=yt(this.state.particleOrigin,this.state.hue,Math.random()*(this.state.maxRadius-this.state.minRadius)+this.state.minRadius);this.state.addRenderable(`PARTICLE${Math.random()} * 1000000`,e),console.log(this.state.hue)},update(){if(!this.state.particleCount)return this;this.state.particleCount++;const t=yt(this.state.particleOrigin,this.state.hue,Math.random()*(this.state.maxRadius-this.state.minRadius)+this.state.minRadius);this.state.addRenderable(`PARTICLE${Math.random()} * 1000000`,t),this.state.particleCount>=this.props.targetParticles&&U.setState(this,Y.state)}},Z={state:{attacking:!1,superAttack:!1},props:{animations:{attack:{repeat:1}}},attack(t=!1){return U.setState(this,{attacking:!0,superAttack:t,animation:{name:"attack"}}).resetAnimation()},update(t=!1){const e=()=>U.setState(this,{...Z.state,animation:{name:i}}).resetAnimation();return t?e():this.state.attacking&&this.isAnimationDone()?e():this}},Q={state:{dying:!1,dead:!1,deadCount:0},props:{animations:{[s]:{images:[],delay:0,repeat:1}}},die(){return"ball"===this.props.name&&this.state.incrementScore(),U.setState(this,{dying:!0,animation:{name:s},acceleration:{y:1,x:0},velocity:{y:10,x:0}}).resetAnimation()},update(t=!1){return t?U.setState(this,Q.state):this.state.dying||this.state.dead?("ball"===this.props.name&&this.state.dead&&++this.state.deadCount>120&&U.setState(this,{display:!1}),this.isAnimationDone()?U.setState(this,{dead:!0}):this):this}},tt={update(){if(this.state.dying||this.state.dead)return this;if(U.vectorGT(this.state.velocity,40)){const t={x:this.state.position.x+this.getCurrentAnimationFrame().width/2,y:this.state.position.y-this.getCurrentAnimationFrame().height/2};U.setState(this,{maxRadius:10,minRadius:1,addRenderable:this.state.addRenderable,particleOrigin:{...t}}),this.emitParticles(),this.die()}}},et={state:{velocity:{x:0,y:0}},props:{runningVelocity:{x:10,y:0},animations:{[o]:{name:o,images:[],delay:0,repeat:1/0,duplicate:0},[r]:{name:r,images:[],delay:0,repeat:1/0,duplicate:0},[n]:{name:n,images:[],delay:0,repeat:1/0,duplicate:0}},maxVelocity:{x:5,y:5},minVelocity:{x:-5,y:-5}},update(){const t=this.state.velocity;return this.state.attacking||"ball"===this.props.name||this.state.dying||(0===t.x?[o,r].includes(this.state.animation.name)&&U.setState(this,{animation:{name:i}}).resetAnimation():(this.props.animations[o].images.length&&U.setState(this,{animation:{name:o}}),this.props.animations[r].images.length&&t.x>=this.props.runningVelocity.x&&U.setState(this,{animation:{name:r}})),0===t.y?this.state.animation.name===n&&U.setState(this,{animation:{name:i}}).resetAnimation():this.props.animations.jumping.images.length&&U.setState(this,{animation:{name:n}})),U.setState(this,{position:this.getNextPosition()})},getNextPosition(){const t=U.vectorAdd(this.state.position,this.state.velocity);return U.vectorMax(t,u)}},at={state:{slowDown:!1,acceleration:{x:0,y:0}},stopMovingX(){return U.setState(this,{velocity:{x:0},acceleration:{x:0},slowDown:!1})},updateVelocities(){const t=u.y===this.state.position.y;t||(this.state.acceleration.y=y);const e=((...t)=>e=>t.reduceRight((t,e)=>e(t),e))(U.vectorMinC(this.props.minVelocity),U.vectorMaxC(this.props.maxVelocity),U.vectorAddC(this.state.acceleration))(this.state.velocity);return t&&this.state.velocity.y>0&&(e.y=this.state.acceleration.y=0),(this.state.dying||this.state.dead)&&(e.x=0),U.setState(this,{velocity:e})},updateFlip(t){const e=this.state.velocity;0!==e.x&&0!==t.x&&this.setAnimationProp("flipped",e.x<0)},shouldStopSlowingDown(){return this.state.acceleration.x>0&&this.state.velocity.x>=0||this.state.acceleration.x<0&&this.state.velocity.x<=0},updateSlowDown(){return this.state.slowDown&&this.shouldStopSlowingDown()&&this.stopMovingX(),this},update(){return this.updateVelocities().updateSlowDown().updateFlip(this.state.velocity)}},it={props:{blocks:!0,damages:!1,elasticity:0,mass:100}},st={props:{zIndex:9,animations:{[i]:{images:[],delay:1/0,repeat:1/0},exploding:{images:[],delay:10,repeat:3}}},state:{animation:{name:i},display:!1,exploding:!1},explode(){this.resetAnimation(),U.setState(this,{exploding:!0,velocity:{x:0},animation:{name:"exploding"}})},update(t){if(t)return(()=>U.setState(this,st.state).resetAnimation())()}},nt=J([X],{state:{animation:{name:i},width:g,height:c},props:{zIndex:-1,animations:{[i]:{images:[U.newImageFromPath("images/Background Layers/Ground.png")],duplicate:1/0,delay:1/0,repeat:1/0}}}}),ot=J([X],{state:{animation:{name:i},width:g,height:c},props:{zIndex:-10,animations:{[i]:{images:[U.newImageFromPath("images/Background Layers/Sky.png")],duplicate:1/0,delay:1/0,repeat:1/0}}}}),rt=J([X,et],{state:{velocity:{x:-2},animation:{name:i,duplicateCount:0}},props:{zIndex:-9,animations:{[i]:{images:[U.newImageFromPath("images/Background Layers/Clouds.png")],delay:1/0,duplicate:1/0,repeat:1/0}}}}),lt={update(){if(this.state.dying||this.state.dead)return this;U.vectorLT(this.state.velocity,10)&&U.setState(this,{animation:{name:i}}),U.vectorGT(this.state.velocity,20)&&U.setState(this,{animation:{name:o}}),U.vectorGT(this.state.velocity,40)&&U.setState(this,{animation:{name:n}}),U.vectorGT(this.state.velocity,50)&&U.setState(this,{animation:{name:r}})}},mt={props:{name:"ball",elasticity:.2,mass:200,zIndex:1,runningVelocity:{x:20,y:20},maxVelocity:{x:150,y:150},minVelocity:{x:-50,y:-50},animations:{[i]:{images:[U.newImageFromPath(w)],imagesFlipped:[U.newImageFromPath(w)],delay:20,repeat:1/0,duplicate:0},[o]:{images:[U.newImageFromPath(v)],imagesFlipped:[U.newImageFromPath(v)],delay:20,repeat:1/0,duplicate:0},[r]:{images:[U.newImageFromPath(A)],imagesFlipped:[U.newImageFromPath(A)],delay:20,repeat:1/0,duplicate:0},[n]:{images:[U.newImageFromPath(I)],imagesFlipped:[U.newImageFromPath(I)],delay:20,repeat:1/0,duplicate:0},[s]:{images:U.newImagesFromPath($),imagesFlipped:U.newImagesFromPath($),delay:10,repeat:3,duplicate:0}}}},ht={props:{name:"ball",elasticity:.9,mass:40,zIndex:1,runningVelocity:{x:20,y:20},maxVelocity:{x:50,y:50},minVelocity:{x:-50,y:-50},animations:{[i]:{images:[U.newImageFromPath(b)],imagesFlipped:[U.newImageFromPath(b)],delay:20,repeat:1/0,duplicate:0},[o]:{images:[U.newImageFromPath(f)],imagesFlipped:[U.newImageFromPath(f)],delay:20,repeat:1/0,duplicate:0},[r]:{images:[U.newImageFromPath(k)],imagesFlipped:[U.newImageFromPath(k)],delay:20,repeat:1/0,duplicate:0},[n]:{images:[U.newImageFromPath(S)],imagesFlipped:[U.newImageFromPath(S)],delay:20,repeat:1/0,duplicate:0},[s]:{images:U.newImagesFromPath($),imagesFlipped:U.newImagesFromPath($),delay:3,repeat:10,duplicate:0}}}},dt={props:{name:"ball",elasticity:.7,mass:840,zIndex:1,runningVelocity:{x:20,y:20},maxVelocity:{x:150,y:150},minVelocity:{x:-50,y:-50},animations:{[i]:{images:[U.newImageFromPath(M)],imagesFlipped:[U.newImageFromPath(M)],delay:20,repeat:1/0,duplicate:0},[o]:{images:[U.newImageFromPath(C)],imagesFlipped:[U.newImageFromPath(C)],delay:20,repeat:1/0,duplicate:0},[r]:{images:[U.newImageFromPath(R)],imagesFlipped:[U.newImageFromPath(R)],delay:20,repeat:1/0,duplicate:0},[n]:{images:[U.newImageFromPath(B)],imagesFlipped:[U.newImageFromPath(B)],delay:20,repeat:1/0,duplicate:0},[s]:{images:U.newImagesFromPath($),imagesFlipped:U.newImagesFromPath($),delay:10,repeat:3,duplicate:0}}}},pt={props:{name:"ball",elasticity:.1,mass:440,zIndex:1,runningVelocity:{x:20,y:20},maxVelocity:{x:150,y:150},minVelocity:{x:-50,y:-50},animations:{[i]:{images:[U.newImageFromPath(E)],imagesFlipped:[U.newImageFromPath(E)],delay:20,repeat:1/0,duplicate:0},[o]:{images:[U.newImageFromPath(D)],imagesFlipped:[U.newImageFromPath(D)],delay:20,repeat:1/0,duplicate:0},[r]:{images:[U.newImageFromPath(T)],imagesFlipped:[U.newImageFromPath(T)],delay:20,repeat:1/0,duplicate:0},[n]:{images:[U.newImageFromPath(O)],imagesFlipped:[U.newImageFromPath(O)],delay:20,repeat:1/0,duplicate:0},[s]:{images:U.newImagesFromPath($),imagesFlipped:U.newImagesFromPath($),delay:10,repeat:3,duplicate:0}}}},ct={props:{name:"ball",elasticity:.2,mass:240,zIndex:1,runningVelocity:{x:20,y:20},maxVelocity:{x:150,y:150},minVelocity:{x:-50,y:-50},animations:{[i]:{images:[U.newImageFromPath(L)],imagesFlipped:[U.newImageFromPath(L)],delay:20,repeat:1/0,duplicate:0},[o]:{images:[U.newImageFromPath(j)],imagesFlipped:[U.newImageFromPath(j)],delay:20,repeat:1/0,duplicate:0},[r]:{images:[U.newImageFromPath(K)],imagesFlipped:[U.newImageFromPath(K)],delay:20,repeat:1/0,duplicate:0},[n]:{images:[U.newImageFromPath(V)],imagesFlipped:[U.newImageFromPath(V)],delay:20,repeat:1/0,duplicate:0},[s]:{images:U.newImagesFromPath($),imagesFlipped:U.newImagesFromPath($),delay:10,repeat:3,duplicate:0}}}},gt=J([X,et,at,Z,Q,it,Y],{props:{blocks:!0,zIndex:1,elasticity:.2,mass:500,radius:125,maxVelocity:{x:200,y:5},minVelocity:{x:-200,y:-5},animations:{[i]:{images:U.newImagesFromPath(["images/Player/1_IDLE_00",5]),imagesFlipped:U.newImagesFromPath(["images/Player Flip/1_IDLE_00",5]),delay:8,repeat:1/0,duplicate:0},[o]:{images:U.newImagesFromPath(["images/Player/2_WALK_00",5]),imagesFlipped:U.newImagesFromPath(["images/Player Flip/2_WALK_00",5]),delay:4,repeat:1/0,duplicate:0},[r]:{images:U.newImagesFromPath(["images/Player/3_RUN_00",5]),imagesFlipped:U.newImagesFromPath(["images/Player Flip/3_RUN_00",5]),delay:4,repeat:1/0,duplicate:0},[n]:{images:U.newImagesFromPath(["images/Player/4_JUMP_00",5]),imagesFlipped:U.newImagesFromPath(["images/Player Flip/4_JUMP_00",5]),delay:8,repeat:1/0,duplicate:0},attack:{images:U.newImagesFromPath(["images/Player/5_ATTACK_00",5]),imagesFlipped:U.newImagesFromPath(["images/Player Flip/5_ATTACK_00",5]),delay:4,repeat:1,duplicate:0},[s]:{images:U.newImagesFromPath(["images/Player/7_DIE_00",5]),imagesFlipped:U.newImagesFromPath(["images/Player Flip/7_DIE_00",5]),delay:4,repeat:1,duplicate:0}}},state:{health:100,animation:{name:i},position:{x:g/5,y:c-400},hadouken:0},update(){return this.state.position.x<0?U.setState(this,{position:{x:0},velocity:{x:0}}):this},doMove(t){return U.setState(this,{slowDown:!1,acceleration:{x:"left"===t?-1:1}})},stopMove(t){return U.setState(this,{slowDown:!0,acceleration:{x:-Math.sign(this.state.velocity.x)*x}}),this},doJump(){const t=this.state.position.y===u.y,e=this.state.velocity.y>0&&this.state.velocity.y<10;return(t||e)&&(this.state.velocity.y-=80),this},doAttack(t,e,a){if(this.attack(t),!t)return this;a&&a();const i={x:this.state.position.x+this.getCurrentAnimationFrame().width/2,y:this.state.position.y-this.getCurrentAnimationFrame().height/2};return U.setState(this,{addRenderable:e,particleOrigin:{...i}}),this.emitParticles(),this},handleAction(t,e,a){switch(t){case"left":case"right":this.doMove(t);break;case"attack":this.state.hadouken&&(this.doAttack(!0,e,a),this.state.hadouken--);break;case"SWORD":this.doAttack(!1)}},handleActionStop(t){switch(t){case"left":case"right":this.stopMove(t);break;case"jump":this.doJump()}}}),ut={state:{position:{x:0,y:0},velocity:{x:0,y:0},radius:5,hue:0},props:{name:"particle",zIndex:10},update(){this.state.position=U.vectorAdd(this.state.position,this.state.velocity),this.state.radius-=.5,this.state.hue-=1,this.state.radius<=0&&U.setState(this,{display:!1})}},yt=(t,e,a)=>J([X,ut],{state:{position:{x:t.x,y:t.y},velocity:{x:40*Math.random()-20,y:40*Math.random()-20},hue:e,radius:a}}),xt=(J([X,et,at,Q,it],{props:{name:"playerTwo",blocks:!0,damages:10,mass:300,elasticity:.3,zIndex:1,animations:{[i]:{images:U.newImagesFromPath(z),imagesFlipped:U.newImagesFromPath(z),delay:5,repeat:1/0},[s]:{images:U.newImagesFromPath(H),imagesFlipped:U.newImagesFromPath(H),delay:5,repeat:1},[o]:{images:U.newImagesFromPath(G),imagesFlipped:U.newImagesFromPath(G),delay:4,repeat:1/0},[r]:{images:U.newImagesFromPath(G),imagesFlipped:U.newImagesFromPath(G),delay:4,repeat:1/0},[n]:{images:U.newImagesFromPath(N),imagesFlipped:U.newImagesFromPath(N),delay:4,repeat:1/0}}},state:{animation:{name:i},position:{x:g/1.5,y:c-800},velocity:{x:-.5,y:0}}}),J([X,et,st,{}],{}),{position:{x:0,y:0},target:gt,update(){const t=this.target.state.position.x-this.position.x;t>P?this.position.x+=t-P:t<200&&(this.position.x-=200-t),this.position.x=Math.max(0,this.position.x)}});(()=>{const t={Ground:nt,Sky:ot,Clouds:rt,[p]:gt};document.fonts.load(`10pt "${_}"`);new class{constructor(t){this.state={game:m,score:0,camera:xt,renderables:{...t},balls:0},W.canvas=U.newCanvas(W.gameArea),this.ctx=W.canvas.getContext("2d"),this.handleKeyDown=this.handleKeyDown.bind(this),this.handleKeyUp=this.handleKeyUp.bind(this),this.animationLoop=this.animationLoop.bind(this),this.addRenderable=this.addRenderable.bind(this),this.incrementScore=this.incrementScore.bind(this),this.playHadoukenSound=this.playHadoukenSound.bind(this),W.theme.loop=!0,W.theme.load();const e=()=>{document.removeEventListener("click",e),document.getElementById("game-area").style.display="block",document.querySelector(".card").style.display="none",W.theme.play(),this.animationLoop(),this.setGameState(h).captureKeys()};document.addEventListener("click",e)}playDangerSound(){W.danger.cloneNode(!0).play()}getHadoukenCount(){return this.getPlayer().state.hadouken}incHadoukenCount(){return this.getPlayer().state.hadouken++,this}animationLoop(){this.cleanUpDead();const t=Math.max(this.getScore(),200),e=this.state.balls<t&&20*Math.random()+1>=20,i=50*Math.random()+1>=50;if(e){i&&this.playDangerSound();const t=i?Math.abs(20):~~(Math.random()*Math.max(2,this.getScore()/50)+1);a(t).forEach(()=>{const t=[mt,ht,dt,pt,ct],e=~~(Math.random()*(t.length-1));this.addBall(t[e],1e5*Math.random())})}this.handleAllCollisions(),this.state.camera.update(),this.getSortedRenderables().forEach(t=>t.render(this.ctx,this.state.camera)),this.getHealth()<=0&&!this.gameStateIs(d)&&(this.state.renderables[p].die(),this.ignoreKeys(),this.setGameState(d)),this.renderInfoBar(),window.requestAnimationFrame(this.animationLoop)}cleanUpDead(){Object.entries(this.state.renderables).forEach(([t,e])=>{if(!e.state.display)return"ball"===e.props.name&&this.state.balls--,void delete this.state.renderables[t];"ball"===e.props.name&&Math.abs(e.state.position.x-this.state.camera.position.x)>5*g&&(this.state.balls--,delete this.state.renderables[t])})}getHealth(){return this.state.renderables[p].state.health}incHealth(){this.playPopSound(),this.state.renderables[p].state.health=Math.min(this.state.renderables[p].state.health+.25,100)}renderGameOver(){return this.ctx.font=`48px "${_}"`,this.ctx.globalAlpha=1,this.ctx.fillStyle="#dc2f4c",this.ctx.textAlign="center",this.ctx.fillText("NOW YOU HAVE TO START FROM THE BEGINNING.",g/2,c/2),this}renderInfoBar(){if(this.gameStateIs(d))return this.renderGameOver();this.ctx.font=`48px "${_}"`,this.ctx.globalAlpha=1;const t=~~this.getHealth(),e=`hsl(${120*(1-(100-t)/100)}, 100%, 50%)`;return this.ctx.fillStyle=e,this.ctx.fillText(`Health: ${t}`,50,50),this.ctx.fillStyle="#fff",this.ctx.fillText(`Score: ${this.getScore()}`,50,100),this.ctx.fillText(`Spawns: ${this.state.balls}`,g-350,50),this.ctx.fillText(`Super: ${this.getHadoukenCount()}`,g-350,100),this}addRenderable(t,e){this.state.renderables[t]=e}handleKeyDown(t){return Object.keys(l).includes(t.key)&&(t=>this.gameStateIs(h)?this.state.renderables[p].handleAction(t,this.addRenderable,this.playHadoukenSound):this)(l[t.key]),this}handleKeyUp(t){return Object.keys(l).includes(t.key)&&(t=>this.gameStateIs(h)?this.state.renderables[p].handleActionStop(t):this)(l[t.key]),this}doAttack(t){return this}getPlayer(){return this.state.renderables[p]}collisionFormula(t,e,a,i){return(t*(a-i)+2*i*e)/(a+i)}handleCollision(t,e,a){if(t.state.dying||e.state.dying||t.state.dead||e.state.dead)return this;const i=e.state.position,s=t.state.position,n=t.props.radius||t.getCurrentAnimationFrame().width/2,o=e.props.radius||e.getCurrentAnimationFrame().width/2,r=e.state.velocity,l=t.state.velocity,m=e.props.mass,h=t.props.mass,d=Math.min(e.props.elasticity,t.props.elasticity),p={x:i.x-s.x,y:i.y-s.y},c=n+o,g=U.vectorLength(p);if(g>c)return this;const u=m+h;[t.props.name||e.props.name].includes("Floor");const y=U.normalize(p),x={x:y.y,y:-y.x},P=U.vectorMultiply(y,n+o-g);e.state.position=U.vectorAdd(i,U.vectorMultiply(P,h/u)),t.state.position=U.vectorAdd(s,U.vectorMultiply(P,-m/u));const F=U.vectorLength(U.vectorMultiply(y,U.vectorDot(r,y))),_=U.vectorLength(U.vectorMultiply(y,U.vectorDot(l,y)));return t.state.velocity=U.vectorAdd(U.vectorMultiply(x,U.vectorDot(l,x)),U.vectorMultiply(y,(d*m*(F-_)+h*_+m*F)/u)),e.state.velocity=U.vectorAdd(U.vectorMultiply(x,U.vectorDot(r,x)),U.vectorMultiply(y,(d*h*(_-F)+m*F+h*_)/u)),a&&(this.getPlayer().state.superAttack&&(this.getPlayer().state.velocity.y=-10),e.state.velocity=U.vectorMultiply(e.state.velocity,a)),[t,e].includes(this.getPlayer())&&!this.getPlayer().state.attacking&&[t,e].forEach(t=>{t===this.getPlayer()&&(t.state.health-=1)}),this}handleAllCollisions(){const t=[...this.getAllBodies()];return t.forEach((e,a)=>{t.slice(a+1).forEach(t=>this.handleCollision(e,t))}),t.filter(t=>t!==this.getPlayer()&&t.state.position.y>=u.y-50).forEach(t=>{t.state.dying&&(t.state.velocity.y=0,t.state.velocity.x=0),t.state.velocity.y*=-.8}),this.getPlayer().state.attacking&&t.forEach(t=>{const e={state:{velocity:{...this.getPlayer().state.velocity},position:{...this.getPlayer().state.position}},props:{mass:100,radius:this.getPlayer().state.superAttack?800:150,elasticity:0}};t!==this.getPlayer()&&this.handleCollision(e,t,1.25)}),this}addBall(t,e){this.state.balls++;const a=J([X,et,at,it,Q,t,lt,tt,Y],{state:{incrementScore:this.incrementScore,addRenderable:this.addRenderable,position:{x:this.state.camera.position.x+~~(Math.random()*g),y:~~(Math.random()*c)-u.y},velocity:{y:-10}}});this.addRenderable(`BALL${e}`,a)}doesRangeOverlap(t,e,a,i,s){return e-a>s&&i-t>s}isCollision(t,e){return this.doesRangeOverlap(t.x1,t.x2,e.x1,e.x2,F)&&this.doesRangeOverlap(t.y1,t.y2,e.y1,e.y2,F)}getSortedRenderables(){return Object.values(this.state.renderables).sort((t,e)=>t.props.zIndex-e.props.zIndex)}getAllBodies(t=[]){return Object.values(this.state.renderables).filter(e=>e&&e.props.blocks&&!t.includes(e))}getGameState(){return this.state.game}gameStateIs(t){return this.getGameState()===t}getScore(){return this.state.score}ignoreKeys(){return document.removeEventListener("keydown",this.handleKeyDown),this}captureKeys(){return document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("keyup",this.handleKeyUp),this}resetScore(){return this.state.score=0,this}updateInfoBar(t){return this}setGameState(t){return this.state.game=t,this}playScoreSound(){const t=this.getScore();let e=null;if(t>=20&&!W.killingspree.hasPlayed&&(e=W.killingspree),t>=50&&!W.rampage.hasPlayed&&(e=W.rampage),t>=150&&!W.ownage.hasPlayed&&(e=W.ownage),t>=200&&!W.unstoppable.hasPlayed&&(e=W.unstoppable),t>=300&&!W.godlike.hasPlayed&&(e=W.godlike),!e)return this;this.incHadoukenCount(),e.hasPlayed=!0,e.play()}incrementScore(t){return this.playScoreSound(),this.incHealth(),this.state.score++,this}playPopSound(){return W.pop.cloneNode(!0).play(),this}playHadoukenSound(){return W.hadouken.cloneNode(!0).play(),this}}(t)})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,